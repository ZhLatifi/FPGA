-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity detectPeaks is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s1 : IN STD_LOGIC_VECTOR (7 downto 0);
    s2 : IN STD_LOGIC_VECTOR (7 downto 0);
    s3 : IN STD_LOGIC_VECTOR (7 downto 0);
    s4 : IN STD_LOGIC_VECTOR (7 downto 0);
    s5 : IN STD_LOGIC_VECTOR (7 downto 0);
    s6 : IN STD_LOGIC_VECTOR (7 downto 0);
    s7 : IN STD_LOGIC_VECTOR (7 downto 0);
    s8 : IN STD_LOGIC_VECTOR (7 downto 0);
    s9 : IN STD_LOGIC_VECTOR (7 downto 0);
    s10 : IN STD_LOGIC_VECTOR (7 downto 0);
    s11 : IN STD_LOGIC_VECTOR (7 downto 0);
    s12 : IN STD_LOGIC_VECTOR (7 downto 0);
    s13 : IN STD_LOGIC_VECTOR (7 downto 0);
    s14 : IN STD_LOGIC_VECTOR (7 downto 0);
    s15 : IN STD_LOGIC_VECTOR (7 downto 0);
    s16 : IN STD_LOGIC_VECTOR (7 downto 0);
    s17 : IN STD_LOGIC_VECTOR (7 downto 0);
    s18 : IN STD_LOGIC_VECTOR (7 downto 0);
    s19 : IN STD_LOGIC_VECTOR (7 downto 0);
    s20 : IN STD_LOGIC_VECTOR (7 downto 0);
    threshold : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of detectPeaks is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "detectPeaks,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s100-fgga676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.079875,HLS_SYN_LAT=208,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=43,HLS_SYN_FF=5622,HLS_SYN_LUT=7203,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_530 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln15_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signal_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal signal_load_reg_762 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln17_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_768 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_1_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_1_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln17_2_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_2_reg_786 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln20_fu_583_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_reg_790 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln20_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal peaks_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal peaks_reg_800 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_pow_generic_double_s_fu_502_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal p_Result_s_reg_810 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_V_2_fu_621_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_2_reg_815 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln502_fu_629_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_reg_820 : STD_LOGIC_VECTOR (11 downto 0);
    signal isNeg_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1311_fu_643_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1311_reg_831 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_524_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal signal_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal signal_ce0 : STD_LOGIC;
    signal signal_we0 : STD_LOGIC;
    signal signal_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal signal_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal signal_ce1 : STD_LOGIC;
    signal signal_we1 : STD_LOGIC;
    signal signal_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal signal_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pow_generic_double_s_fu_502_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_502_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_502_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_502_ap_ready : STD_LOGIC;
    signal i_0_reg_490 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_pow_generic_double_s_fu_502_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_NS_fsm_state20 : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln17_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_1_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_2_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal peaks_1_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_42_fu_730_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_518_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_fu_557_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_513_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_fu_611_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln502_fu_625_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mantissa_V_fu_649_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln1311_fu_662_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_665_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_3_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_fu_679_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_fu_658_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_fu_675_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_683_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_16_fu_695_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_19_fu_689_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_707_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_41_fu_717_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);

    component pow_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        exp : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component detectPeaks_dadd_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component detectPeaks_sitodibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component detectPeaks_signal IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    signal_U : component detectPeaks_signal
    generic map (
        DataWidth => 8,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => signal_address0,
        ce0 => signal_ce0,
        we0 => signal_we0,
        d0 => signal_d0,
        q0 => signal_q0,
        address1 => signal_address1,
        ce1 => signal_ce1,
        we1 => signal_we1,
        d1 => signal_d1,
        q1 => signal_q1);

    grp_pow_generic_double_s_fu_502 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_502_ap_start,
        ap_done => grp_pow_generic_double_s_fu_502_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_502_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_502_ap_ready,
        exp => reg_530,
        ap_return => grp_pow_generic_double_s_fu_502_ap_return);

    detectPeaks_dadd_hbi_U11 : component detectPeaks_dadd_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_530,
        din1 => grp_pow_generic_double_s_fu_502_ap_return,
        ce => ap_const_logic_1,
        dout => grp_fu_513_p2);

    detectPeaks_sitodibs_U12 : component detectPeaks_sitodibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_518_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_518_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_502_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_502_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_logic_1 = ap_NS_fsm_state20))) then 
                    grp_pow_generic_double_s_fu_502_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_502_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_502_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i_0_reg_490 <= grp_fu_524_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_0_reg_490 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    peaks_1_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln17_2_reg_786 = ap_const_lv1_1) and (icmp_ln17_1_reg_777 = ap_const_lv1_1) and (icmp_ln17_reg_768 = ap_const_lv1_1))) then 
                peaks_1_fu_144 <= p_Val2_42_fu_730_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                peaks_1_fu_144 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln17_2_fu_578_p2 = ap_const_lv1_1))) then
                add_ln20_reg_790 <= add_ln20_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                add_ln502_reg_820 <= add_ln502_fu_629_p2;
                isNeg_reg_825 <= add_ln502_fu_629_p2(11 downto 11);
                p_Result_s_reg_810 <= p_Val2_s_fu_599_p1(63 downto 63);
                sub_ln1311_reg_831 <= sub_ln1311_fu_643_p2;
                tmp_V_2_reg_815 <= tmp_V_2_fu_621_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                icmp_ln17_1_reg_777 <= icmp_ln17_1_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                icmp_ln17_2_reg_786 <= icmp_ln17_2_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_ln17_reg_768 <= icmp_ln17_fu_552_p2;
                signal_load_reg_762 <= signal_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                peaks_reg_800 <= peaks_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_530 <= grp_fu_518_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln15_fu_541_p2, ap_CS_fsm_state12, icmp_ln17_fu_552_p2, icmp_ln17_1_fu_568_p2, ap_CS_fsm_state13, icmp_ln17_2_fu_578_p2, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln15_fu_541_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln17_fu_552_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln17_1_fu_568_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln17_2_fu_578_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln17_fu_557_p2 <= std_logic_vector(unsigned(i_0_reg_490) + unsigned(ap_const_lv5_1F));
    add_ln20_fu_583_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(i_0_reg_490));
    add_ln502_fu_629_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_fu_625_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state20 <= ap_NS_fsm(19);

    ap_done_assign_proc : process(ap_CS_fsm_state11, icmp_ln15_fu_541_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln15_fu_541_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln15_fu_541_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln15_fu_541_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= peaks_1_fu_144;

    grp_fu_518_p0_assign_proc : process(zext_ln20_fu_589_p1, ap_CS_fsm_state15, peaks_reg_800, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_518_p0 <= peaks_reg_800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_518_p0 <= zext_ln20_fu_589_p1;
        else 
            grp_fu_518_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_524_p2 <= std_logic_vector(unsigned(i_0_reg_490) + unsigned(ap_const_lv5_1));
    grp_pow_generic_double_s_fu_502_ap_start <= grp_pow_generic_double_s_fu_502_ap_start_reg;
    icmp_ln15_fu_541_p2 <= "1" when (i_0_reg_490 = ap_const_lv5_13) else "0";
    icmp_ln17_1_fu_568_p2 <= "1" when (unsigned(signal_load_reg_762) > unsigned(signal_q1)) else "0";
    icmp_ln17_2_fu_578_p2 <= "1" when (unsigned(signal_load_reg_762) > unsigned(signal_q0)) else "0";
    icmp_ln17_fu_552_p2 <= "1" when (unsigned(signal_q0) > unsigned(threshold)) else "0";
    mantissa_V_fu_649_p4 <= ((ap_const_lv1_1 & tmp_V_2_reg_815) & ap_const_lv1_0);
    p_Val2_41_fu_717_p3 <= 
        zext_ln662_fu_703_p1 when (isNeg_reg_825(0) = '1') else 
        tmp_7_fu_707_p4;
    p_Val2_42_fu_730_p3 <= 
        result_V_1_fu_724_p2 when (p_Result_s_reg_810(0) = '1') else 
        p_Val2_41_fu_717_p3;
    p_Val2_s_fu_599_p1 <= grp_fu_513_p2;
    peaks_fu_593_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(peaks_1_fu_144));
    r_V_19_fu_689_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_658_p1),to_integer(unsigned('0' & zext_ln1287_fu_675_p1(31-1 downto 0)))));
    r_V_fu_683_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_649_p4),to_integer(unsigned('0' & zext_ln1285_fu_679_p1(31-1 downto 0)))));
    result_V_1_fu_724_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_41_fu_717_p3));
        sext_ln1311_3_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_665_p3),32));

        sext_ln1311_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_reg_831),12));


    signal_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln17_fu_547_p1, zext_ln17_2_fu_573_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            signal_address0 <= zext_ln17_2_fu_573_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            signal_address0 <= zext_ln17_fu_547_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            signal_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            signal_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            signal_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            signal_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            signal_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            signal_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            signal_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            signal_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            signal_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            signal_address0 <= "XXXXX";
        end if; 
    end process;


    signal_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln17_1_fu_563_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            signal_address1 <= zext_ln17_1_fu_563_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            signal_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            signal_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            signal_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            signal_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            signal_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            signal_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            signal_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            signal_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            signal_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            signal_address1 <= "XXXXX";
        end if; 
    end process;


    signal_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            signal_ce0 <= ap_const_logic_1;
        else 
            signal_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    signal_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            signal_ce1 <= ap_const_logic_1;
        else 
            signal_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    signal_d0_assign_proc : process(ap_CS_fsm_state1, s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            signal_d0 <= s19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            signal_d0 <= s17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            signal_d0 <= s15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            signal_d0 <= s13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            signal_d0 <= s11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            signal_d0 <= s9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            signal_d0 <= s7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_d0 <= s5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            signal_d0 <= s3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            signal_d0 <= s1;
        else 
            signal_d0 <= "XXXXXXXX";
        end if; 
    end process;


    signal_d1_assign_proc : process(ap_CS_fsm_state1, s2, s4, s6, s8, s10, s12, s14, s16, s18, s20, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            signal_d1 <= s20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            signal_d1 <= s18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            signal_d1 <= s16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            signal_d1 <= s14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            signal_d1 <= s12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            signal_d1 <= s10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            signal_d1 <= s8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_d1 <= s6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            signal_d1 <= s4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            signal_d1 <= s2;
        else 
            signal_d1 <= "XXXXXXXX";
        end if; 
    end process;


    signal_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            signal_we0 <= ap_const_logic_1;
        else 
            signal_we0 <= ap_const_logic_0;
        end if; 
    end process;


    signal_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            signal_we1 <= ap_const_logic_1;
        else 
            signal_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1311_fu_643_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_611_p4));
    tmp_16_fu_695_p3 <= r_V_fu_683_p2(53 downto 53);
    tmp_7_fu_707_p4 <= r_V_19_fu_689_p2(84 downto 53);
    tmp_V_2_fu_621_p1 <= p_Val2_s_fu_599_p1(52 - 1 downto 0);
    tmp_V_fu_611_p4 <= p_Val2_s_fu_599_p1(62 downto 52);
    ush_fu_665_p3 <= 
        sext_ln1311_fu_662_p1 when (isNeg_reg_825(0) = '1') else 
        add_ln502_reg_820;
    zext_ln1285_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_3_fu_671_p1),54));
    zext_ln1287_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_3_fu_671_p1),137));
    zext_ln17_1_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_fu_557_p2),64));
    zext_ln17_2_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_524_p2),64));
    zext_ln17_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_490),64));
    zext_ln20_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_reg_790),32));
    zext_ln502_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_611_p4),12));
    zext_ln662_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_695_p3),32));
    zext_ln682_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_649_p4),137));
end behav;
