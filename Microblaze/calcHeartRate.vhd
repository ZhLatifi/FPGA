-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calcHeartRate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    peaks : IN STD_LOGIC_VECTOR (31 downto 0);
    fs : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of calcHeartRate is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "calcHeartRate,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s100-fgga676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.079875,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=43,HLS_SYN_FF=6449,HLS_SYN_LUT=8659,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (56 downto 0) := "000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (56 downto 0) := "000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (56 downto 0) := "000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (56 downto 0) := "000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (56 downto 0) := "000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (56 downto 0) := "000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (56 downto 0) := "000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (56 downto 0) := "000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (56 downto 0) := "000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (56 downto 0) := "001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (56 downto 0) := "010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (56 downto 0) := "100000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_42700000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010011100000000000000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal num_fu_229_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal num_reg_660 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln9_fu_233_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln9_reg_665 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln11_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln11_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln13_fu_247_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_reg_679 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln11_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_253_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_684 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_assign_reg_694 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Val2_s_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_reg_699 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal p_Val2_46_fu_377_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_46_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal rPeaks_1_3_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal rPeaks_1_4_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_455_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rSum_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln20_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_492_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln24_fu_498_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln24_reg_738 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_1_reg_753 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_pow_generic_double_s_fu_188_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_188_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_188_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_188_ap_ready : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_188_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal rPeaks_1_012_reg_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal rPeaks_0_011_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal rPeaks_0_reg_142 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal rSum_0_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_177 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pow_generic_double_s_fu_188_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_NS_fsm_state8 : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_212_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_2_fu_277_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_281_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_267_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln502_fu_295_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_fu_299_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_313_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_305_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_319_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_323_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_3_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_fu_339_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_fu_291_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_fu_335_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_343_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_fu_355_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_19_fu_349_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_367_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_1_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_47_fu_397_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln13_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln15_fu_415_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rPeaks_1_1_fu_419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rPeaks_1_2_fu_426_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln21_fu_468_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln21_fu_472_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal p_Val2_41_fu_507_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_4_fu_528_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_1_fu_532_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_3_fu_518_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_546_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_550_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_1_fu_564_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_556_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_4_fu_570_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_2_fu_574_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_5_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_6_fu_586_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_1_fu_542_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_1_fu_590_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_20_fu_594_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_16_fu_606_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_21_fu_600_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_1_fu_614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_618_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_48_fu_628_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_18_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_3_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);

    component pow_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        exp : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calcHeartRate_fmuhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calcHeartRate_fdiibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calcHeartRate_sitjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calcHeartRate_sitkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calcHeartRate_sitlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_pow_generic_double_s_fu_188 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_188_ap_start,
        ap_done => grp_pow_generic_double_s_fu_188_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_188_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_188_ap_ready,
        exp => y_assign_reg_694,
        ap_return => grp_pow_generic_double_s_fu_188_ap_return);

    calcHeartRate_fmuhbi_U11 : component calcHeartRate_fmuhbi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_223,
        din1 => ap_const_lv32_42700000,
        ce => ap_const_logic_1,
        dout => grp_fu_199_p2);

    calcHeartRate_fdiibs_U12 : component calcHeartRate_fdiibs
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_218,
        din1 => grp_fu_204_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_204_p2);

    calcHeartRate_sitjbC_U13 : component calcHeartRate_sitjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_208_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_208_p1);

    calcHeartRate_sitkbM_U14 : component calcHeartRate_sitkbM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_212_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_212_p1);

    calcHeartRate_sitlbW_U15 : component calcHeartRate_sitlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_215_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_215_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_188_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_188_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state8) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_pow_generic_double_s_fu_188_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_188_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_188_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                j_0_reg_153 <= j_1_fu_455_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_153 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    k_0_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_241_p2 = ap_const_lv1_1))) then 
                k_0_reg_177 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln20_fu_463_p2 = ap_const_lv1_1))) then 
                k_0_reg_177 <= k_fu_492_p2;
            end if; 
        end if;
    end process;

    rPeaks_0_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                rPeaks_0_reg_142 <= i_reg_684;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rPeaks_0_reg_142 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    rSum_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_241_p2 = ap_const_lv1_1))) then 
                rSum_0_reg_165 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln20_fu_463_p2 = ap_const_lv1_1))) then 
                rSum_0_reg_165 <= rSum_fu_486_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_241_p2 = ap_const_lv1_0))) then
                add_ln13_reg_679 <= add_ln13_fu_247_p2;
                i_reg_684 <= i_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln20_fu_463_p2 = ap_const_lv1_0))) then
                add_ln24_reg_738 <= add_ln24_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                num_reg_660 <= num_fu_229_p1;
                    zext_ln9_reg_665(3 downto 0) <= zext_ln9_fu_233_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                p_Val2_46_reg_704 <= p_Val2_46_fu_377_p3;
                p_Val2_s_reg_699 <= p_Val2_s_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                rPeaks_0_011_reg_130 <= rPeaks_1_4_fu_447_p3;
                rPeaks_1_012_reg_118 <= rPeaks_1_3_fu_439_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state29))) then
                reg_218 <= grp_fu_208_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state41))) then
                reg_223 <= grp_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp_1_reg_748 <= grp_fu_212_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                x_assign_1_reg_753 <= grp_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                y_assign_reg_694 <= grp_fu_215_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    zext_ln11_reg_670(4 downto 0) <= zext_ln11_fu_237_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln9_reg_665(4) <= '0';
    zext_ln11_reg_670(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln11_fu_241_p2, ap_CS_fsm_state25, icmp_ln20_fu_463_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_241_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln20_fu_463_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln13_fu_247_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(rPeaks_0_reg_142));
    add_ln21_fu_480_p2 <= std_logic_vector(unsigned(rSum_0_reg_165) + unsigned(rPeaks_1_012_reg_118));
    add_ln24_fu_498_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(zext_ln9_reg_665));
    add_ln339_fu_550_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_546_p1));
    add_ln502_fu_299_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_fu_295_p1));
    and_ln13_fu_404_p2 <= (peaks and p_Val2_47_fu_397_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_NS_fsm_state8 <= ap_NS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        result_V_3_fu_636_p2 when (p_Result_18_fu_510_p3(0) = '1') else 
        p_Val2_48_fu_628_p3;

    grp_fu_204_p1_assign_proc : process(reg_223, tmp_1_reg_748, ap_CS_fsm_state30, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_204_p1 <= reg_223;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_204_p1 <= tmp_1_reg_748;
        else 
            grp_fu_204_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_208_p0_assign_proc : process(fs, ap_CS_fsm_state26, rSum_0_reg_165, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_208_p0 <= fs;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_208_p0 <= rSum_0_reg_165;
        else 
            grp_fu_208_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

        grp_fu_212_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln24_reg_738),32));

    grp_fu_215_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_reg_679),32));
    grp_pow_generic_double_s_fu_188_ap_start <= grp_pow_generic_double_s_fu_188_ap_start_reg;
    i_fu_253_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(rPeaks_0_reg_142));
    icmp_ln11_fu_241_p2 <= "1" when (rPeaks_0_reg_142 = ap_const_lv5_13) else "0";
    icmp_ln13_fu_409_p2 <= "1" when (and_ln13_fu_404_p2 = ap_const_lv32_0) else "0";
    icmp_ln20_fu_463_p2 <= "1" when (unsigned(k_0_reg_177) < unsigned(num_reg_660)) else "0";
    isNeg_1_fu_556_p3 <= add_ln339_fu_550_p2(8 downto 8);
    isNeg_fu_305_p3 <= add_ln502_fu_299_p2(11 downto 11);
    j_1_fu_455_p3 <= 
        j_0_reg_153 when (icmp_ln13_fu_409_p2(0) = '1') else 
        j_fu_433_p2;
    j_fu_433_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j_0_reg_153));
    k_fu_492_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(k_0_reg_177));
    mantissa_V_1_fu_532_p4 <= ((ap_const_lv1_1 & tmp_V_4_fu_528_p1) & ap_const_lv1_0);
    mantissa_V_fu_281_p4 <= ((ap_const_lv1_1 & tmp_V_2_fu_277_p1) & ap_const_lv1_0);
    num_fu_229_p1 <= peaks(4 - 1 downto 0);
    p_Result_18_fu_510_p3 <= p_Val2_41_fu_507_p1(31 downto 31);
    p_Result_s_fu_385_p3 <= p_Val2_s_reg_699(63 downto 63);
    p_Val2_41_fu_507_p1 <= x_assign_1_reg_753;
    p_Val2_46_fu_377_p3 <= 
        zext_ln662_fu_363_p1 when (isNeg_fu_305_p3(0) = '1') else 
        tmp_6_fu_367_p4;
    p_Val2_47_fu_397_p3 <= 
        result_V_1_fu_392_p2 when (p_Result_s_fu_385_p3(0) = '1') else 
        p_Val2_46_reg_704;
    p_Val2_48_fu_628_p3 <= 
        zext_ln662_1_fu_614_p1 when (isNeg_1_fu_556_p3(0) = '1') else 
        tmp_8_fu_618_p4;
    p_Val2_s_fu_263_p1 <= grp_pow_generic_double_s_fu_188_ap_return;
    rPeaks_1_1_fu_419_p3 <= 
        zext_ln11_reg_670 when (trunc_ln15_fu_415_p1(0) = '1') else 
        rPeaks_1_012_reg_118;
    rPeaks_1_2_fu_426_p3 <= 
        rPeaks_0_011_reg_130 when (trunc_ln15_fu_415_p1(0) = '1') else 
        zext_ln11_reg_670;
    rPeaks_1_3_fu_439_p3 <= 
        rPeaks_1_012_reg_118 when (icmp_ln13_fu_409_p2(0) = '1') else 
        rPeaks_1_1_fu_419_p3;
    rPeaks_1_4_fu_447_p3 <= 
        rPeaks_0_011_reg_130 when (icmp_ln13_fu_409_p2(0) = '1') else 
        rPeaks_1_2_fu_426_p3;
    rSum_fu_486_p2 <= std_logic_vector(unsigned(add_ln21_fu_480_p2) - unsigned(select_ln21_fu_472_p3));
    r_V_19_fu_349_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_291_p1),to_integer(unsigned('0' & zext_ln1287_fu_335_p1(31-1 downto 0)))));
    r_V_20_fu_594_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_1_fu_532_p4),to_integer(unsigned('0' & sext_ln1311_6_fu_586_p1(25-1 downto 0)))));
    r_V_21_fu_600_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_1_fu_542_p1),to_integer(unsigned('0' & zext_ln1287_1_fu_590_p1(31-1 downto 0)))));
    r_V_fu_343_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_281_p4),to_integer(unsigned('0' & zext_ln1285_fu_339_p1(31-1 downto 0)))));
    result_V_1_fu_392_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_46_reg_704));
    result_V_3_fu_636_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_48_fu_628_p3));
    select_ln21_fu_472_p3 <= 
        rPeaks_0_011_reg_130 when (trunc_ln21_fu_468_p1(0) = '1') else 
        rPeaks_1_012_reg_118;
        sext_ln1311_3_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_323_p3),32));

        sext_ln1311_4_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_564_p2),9));

        sext_ln1311_5_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_574_p3),32));

        sext_ln1311_6_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_574_p3),25));

        sext_ln1311_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_313_p2),12));

    sub_ln1311_1_fu_564_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_3_fu_518_p4));
    sub_ln1311_fu_313_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_267_p4));
    tmp_16_fu_606_p3 <= r_V_20_fu_594_p2(24 downto 24);
    tmp_6_fu_367_p4 <= r_V_19_fu_349_p2(84 downto 53);
    tmp_8_fu_618_p4 <= r_V_21_fu_600_p2(55 downto 24);
    tmp_V_2_fu_277_p1 <= p_Val2_s_fu_263_p1(52 - 1 downto 0);
    tmp_V_3_fu_518_p4 <= p_Val2_41_fu_507_p1(30 downto 23);
    tmp_V_4_fu_528_p1 <= p_Val2_41_fu_507_p1(23 - 1 downto 0);
    tmp_V_fu_267_p4 <= p_Val2_s_fu_263_p1(62 downto 52);
    tmp_fu_355_p3 <= r_V_fu_343_p2(53 downto 53);
    trunc_ln15_fu_415_p1 <= j_0_reg_153(1 - 1 downto 0);
    trunc_ln21_fu_468_p1 <= k_0_reg_177(1 - 1 downto 0);
    ush_2_fu_574_p3 <= 
        sext_ln1311_4_fu_570_p1 when (isNeg_1_fu_556_p3(0) = '1') else 
        add_ln339_fu_550_p2;
    ush_fu_323_p3 <= 
        sext_ln1311_fu_319_p1 when (isNeg_fu_305_p3(0) = '1') else 
        add_ln502_fu_299_p2;
    zext_ln11_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rPeaks_0_reg_142),32));
    zext_ln1285_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_3_fu_331_p1),54));
    zext_ln1287_1_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_5_fu_582_p1),79));
    zext_ln1287_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_3_fu_331_p1),137));
    zext_ln339_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_3_fu_518_p4),9));
    zext_ln502_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_267_p4),12));
    zext_ln662_1_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_606_p3),32));
    zext_ln662_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_355_p3),32));
    zext_ln682_1_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_532_p4),79));
    zext_ln682_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_281_p4),137));
    zext_ln9_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_fu_229_p1),5));
end behav;
